package com.ardnew.iba;

import java.util.LinkedList;
import java.util.Arrays;
import java.io.IOException;

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// file:
//   Iba.java
//
// description:
//   TODO
//
// author:
//   ardnew, andrew@ardnew.com
//
// date:
//   April 20, 2013
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
public class Iba
{
  
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// private static class fields
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  
  private static LinkedList<IRCThread> _pool;

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// application entry point - main method
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  
  public static void main(String[] args)
  { 
    LinkedList<IRCThread> pool = new LinkedList<IRCThread>();
    
    int i = 3;
    
    while (i-->0)
    {
      try
      {
        IRCUser user = new IRCUser("iba" + i, "dickbutt" + i, "ardnew" + i);
        IRCHost host = new IRCHost("irc.binaryshadow.org", 6667, null, 
          new LinkedList<IRCChan>(Arrays.asList(
            new IRCChan("#test", null))
          )
        );        
        
        pool.add(Iba.createIRCThread(host, user, false));
        pool.remove().connect();;
      }
      catch (Exception e)
      {
        e.printStackTrace();
      }
      finally
      {
        // wtf
      }
    }
  }
  
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// private methods
//
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// 
    
  private static IRCThread createIRCThread(IRCHost host, IRCUser user, boolean daemon) throws IOException
  {
    IRCThread conn;    
    
    // instantiate the connection thread (but do NOT dispatch)
    conn = new IRCThread(host, user);
    
    // if true, the JVM will exit without waiting on us
    conn.setDaemon(daemon); 
    
    // perform any pre-connect configurations
    conn.setColors(false);
    conn.setPong(true);
    
    // establish the connection and let the event handlers take control from here
    return conn;
  }
  
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// public access to the thread pool (plz don't abuse)
//
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// 
  
  public static LinkedList<IRCThread> pool()
  {
    return Iba._pool;
  }
}
