package com.ardnew.iba;

import java.util.LinkedList;
import java.util.Arrays;
import java.io.IOException;

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// file:
//   Iba.java
//
// description:
//   TODO
//
// author:
//   ardnew, andrew@ardnew.com
//
// date:
//   April 20, 2013
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
public class Iba
{
  
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// private static class fields
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  
  private static LinkedList<IRCThread> _pool = new LinkedList<IRCThread>();

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// application entry point - main method
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  
  public static void main(String[] args)
  { 
    IRCThread thread;
    
    for (int i = 1; i <= 2; ++i)
    {
      try
      { 
        IRCUser user = new IRCUser("iba" + i, "dickbutt" + i, "ardnew" + i);
        IRCHost host = new IRCHost("irc.binaryshadow.org", 6667, null, 
          new LinkedList<IRCChan>(
            Arrays.asList(
              new IRCChan("#test1", null),
              new IRCChan("#test2", null)
            )
          )
        );        
        
        thread = Iba.createIRCThread(host, user, false);
        
        // establish the connection and let the event handlers take control from here
        thread.connect();
        
        // keep a witness of the thread
        Iba._pool.add(thread);
      }
      catch (Exception e)
      {
        
      }
      finally
      {
        
      }
    }
  }
  
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// private methods
//
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// 
    
  private static IRCThread createIRCThread(IRCHost host, IRCUser user, boolean daemon) throws IOException
  {
    // instantiate the connection thread (but do NOT dispatch)
    IRCThread conn = new IRCThread(host, user);
    
    // if true, the JVM will exit without waiting on us
    conn.setDaemon(daemon); 
    
    // perform any pre-connect configurations
    conn.setColors(false);
    conn.setPong(true);
        
    return conn;
  }
  
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// public access to the thread pool (plz don't abuse)
//
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// 
  
  public static LinkedList<IRCThread> pool()
  {
    return Iba._pool;
  }
}
